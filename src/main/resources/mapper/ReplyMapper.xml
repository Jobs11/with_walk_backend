<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.with_walk.mapper.ReplyMapper">

    <!-- ========================================
         댓글 CRUD
         ======================================== -->

    <!-- 댓글 등록 -->
    <insert id="insertReply" parameterType="com.example.with_walk.dto.ReplyDTO"
            useGeneratedKeys="true" keyProperty="replyId">
        INSERT INTO replies (
            post_id,
            parent_reply_id,
            m_id,
            reply_content,
            reply_status,
            like_count
        ) VALUES (
            #{postId},
            #{parentReplyId},
            #{mId},
            #{replyContent},
            COALESCE(#{replyStatus}, '공개'),
            0
        )
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateReply">
        UPDATE replies
        SET reply_content = #{replyContent},
            updated_at = CURRENT_TIMESTAMP
        WHERE reply_id = #{replyId}
    </update>

    <!-- 댓글 삭제 (상태 변경) -->
    <update id="deleteReply">
        UPDATE replies
        SET reply_status = '삭제',
            updated_at = CURRENT_TIMESTAMP
        WHERE reply_id = #{replyId}
    </update>

    <!-- 댓글 완전 삭제 -->
    <delete id="hardDeleteReply">
        DELETE FROM replies
        WHERE reply_id = #{replyId}
    </delete>

    <!-- 게시글의 모든 댓글 조회 (계층 구조) -->
    <select id="getRepliesByPostId" resultType="com.example.with_walk.dto.ReplyDTO">
        <![CDATA[
        SELECT
            r.reply_id AS replyId,
            r.post_id AS postId,
            r.parent_reply_id AS parentReplyId,
            r.m_id AS mId,
            m.m_name AS mName,
            m.m_nickname AS mNickname,
            m.m_profile_image AS mProfileImage,
            r.reply_content AS replyContent,
            r.reply_date AS replyDate,
            r.reply_status AS replyStatus,
            r.like_count AS likeCount,
            CASE WHEN rl.reply_id IS NOT NULL THEN 1 ELSE 0 END AS isLiked,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt
        FROM replies r
        INNER JOIN members m ON r.m_id = m.m_id
        LEFT JOIN reply_likes rl ON r.reply_id = rl.reply_id AND rl.m_id = #{currentUserId}
        WHERE r.post_id = #{postId}
          AND r.reply_status = '공개'
        ORDER BY
            COALESCE(r.parent_reply_id, r.reply_id),
            r.reply_date ASC
        ]]>
    </select>

    <!-- 댓글 상세 조회 -->
    <select id="getReplyById" resultType="com.example.with_walk.dto.ReplyDTO">
        <![CDATA[
        SELECT
            r.reply_id AS replyId,
            r.post_id AS postId,
            r.parent_reply_id AS parentReplyId,
            r.m_id AS mId,
            m.m_name AS mName,
            m.m_nickname AS mNickname,
            m.m_profile_image AS mProfileImage,
            r.reply_content AS replyContent,
            r.reply_date AS replyDate,
            r.reply_status AS replyStatus,
            r.like_count AS likeCount,
            CASE WHEN rl.reply_id IS NOT NULL THEN 1 ELSE 0 END AS isLiked,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt
        FROM replies r
        INNER JOIN members m ON r.m_id = m.m_id
        LEFT JOIN reply_likes rl ON r.reply_id = rl.reply_id AND rl.m_id = #{currentUserId}
        WHERE r.reply_id = #{replyId}
        ]]>
    </select>

    <!-- 사용자가 작성한 댓글 목록 -->
    <select id="getRepliesByUserId" resultType="com.example.with_walk.dto.ReplyDTO">
        SELECT
            r.reply_id AS replyId,
            r.post_id AS postId,
            r.parent_reply_id AS parentReplyId,
            r.m_id AS mId,
            r.reply_content AS replyContent,
            r.reply_date AS replyDate,
            r.reply_status AS replyStatus,
            r.like_count AS likeCount,
            r.created_at AS createdAt
        FROM replies r
        WHERE r.m_id = #{mId}
          AND r.reply_status = '공개'
        ORDER BY r.reply_date DESC
    </select>

    <!-- 댓글 개수 조회 -->
    <select id="getReplyCountByPostId" resultType="int">
        SELECT COUNT(*)
        FROM replies
        WHERE post_id = #{postId}
          AND reply_status = '공개'
    </select>

    <!-- ========================================
         좋아요
         ======================================== -->

    <!-- 댓글 좋아요 추가 -->
    <insert id="insertReplyLike">
        INSERT INTO reply_likes (reply_id, m_id)
        VALUES (#{replyId}, #{mId})
        ON DUPLICATE KEY UPDATE created_at = created_at
    </insert>

    <!-- 댓글 좋아요 취소 -->
    <delete id="deleteReplyLike">
        DELETE FROM reply_likes
        WHERE reply_id = #{replyId}
          AND m_id = #{mId}
    </delete>

    <!-- 좋아요 여부 확인 -->
    <select id="checkReplyLike" resultType="int">
        SELECT COUNT(*)
        FROM reply_likes
        WHERE reply_id = #{replyId}
          AND m_id = #{mId}
    </select>

    <!-- 댓글 좋아요 수 증가 -->
    <update id="incrementReplyLikeCount">
        UPDATE replies
        SET like_count = like_count + 1
        WHERE reply_id = #{replyId}
    </update>

    <!-- 댓글 좋아요 수 감소 -->
    <update id="decrementReplyLikeCount">
        <![CDATA[
        UPDATE replies
        SET like_count = like_count - 1
        WHERE reply_id = #{replyId}
          AND like_count > 0
        ]]>
    </update>

</mapper>
